@using System.Timers
@using LapTimer.Data
@page "/timer"

<div class="container">
    <h3>ラップタイマー</h3>

    <div class="container-fluid">
        <section>
            <div class="row">
                <div class="col-sm-12 alert alert-secondary text-center p-0">
                    <h1 class="display-1 m-0">@TimerClock.ToString(@"hh\:mm\:ss\.f")</h1>
                </div>
            </div>
            <div class="row">
                <div class="col-sm-12 text-center">
                    <button type="button" class="btn btn-primary" @onclick="StartTimer" disabled="@timerButtonsState.TimerStartButtonDisabled">測定開始</button>
                    <button type="button" class="btn btn-danger" @onclick="StopTimer" disabled="@timerButtonsState.TimerStopButtonDisabled">停止</button>
                    <button type="button" class="btn btn-secondary" @onclick="ResetTimer" disabled="@timerButtonsState.TimerResetButtonDisabled">リセット</button>
                </div>
            </div>
        </section>

        <br>

        <section>
            <table class="table table-striped table-sm">
                <thead>
                    <tr>
                        <th>周回</th>
                        <th>時間（秒）</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>

                    </tr>
                </tbody>
            </table>
        </section>
    </div>
</div>

@code {
    [Inject]
    private TimerButtonsState timerButtonsState { get; set; }

    private static TimeSpan TimerClock = new(0, 0, 0, 0, 0); // 表示用

    private static TimeSpan AddTimeSpan = TimeSpan.FromMilliseconds(100); // 加算用

    private System.Timers.Timer _timer = new System.Timers.Timer(100); // 1ms間隔

    protected override void OnInitialized()
    {
        _timer.Elapsed += (sender, e) =>
        {
            TimerClock = TimerClock.Add(AddTimeSpan);
            RefreshView();
        };
        _timer.AutoReset = true;

        base.OnInitialized();
    }

    private void StartTimer()
    {
        _timer.Enabled = true;
        timerButtonsState.TimerStart();
    }

    private void StopTimer()
    {
        _timer.Stop();
        timerButtonsState.TimerStop();

        RefreshView();
    }

    private void ResetTimer()
    {
        _timer.Stop();
        TimerClock = new(0, 0, 0, 0, 0);
        timerButtonsState.TimerReset();

        RefreshView();
    }

    private void RefreshView()
    {
        InvokeAsync(() => StateHasChanged());
    }
}
